{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/PostGrid.js","comps/Post.js","App.js","index.js"],"names":["Title","className","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","useStorage","ServerTimestamp","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","window","storageRef","ref","name","collectionRef","collection","put","on","snapshot","percentage","bytesTransferred","totalBytes","a","getDownloadURL","createdAt","Date","console","log","add","ProgressBar","setFile","motion","div","initial","width","animate","UploadForm","React","allowedFileTypes","type","onChange","e","selected","target","files","includes","useFirstore","docs","setDocs","orderBy","onSnapshot","documents","map","doc","id","data","PostGrid","setSelectedImage","useFirestore","whileHover","opacity","layout","key","onClick","img","src","alt","transition","delay","Post","selectedImage","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73258596.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className='title'>\n      <h1>Sharely</h1>\n      <h2>Share Your Journey</h2>\n    </div>\n  );\n};\n\nexport default Title;\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAJf-EFsEMrWHaHxJ1UAu9XCg7cWwfbnkU\",\n  authDomain: \"web-journal-8f8cc.firebaseapp.com\",\n  projectId: \"web-journal-8f8cc\",\n  storageBucket: \"web-journal-8f8cc.appspot.com\",\n  messagingSenderId: \"760516707327\",\n  appId: \"1:760516707327:web:a203e6c06f60a7d8bf1dca\",\n};\n\n// Initialize Firebase\nconst firebase = initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\n//console.log(projectFirestore);\nconst timestamp = firebase.firestore.ServerTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore } from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"posts\");\n\n    storageRef.put(file).on(\n      \"state_changed\",\n      (snapshot) => {\n        let percentage =\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (error) => {\n        setError(error);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        var createdAt = new Date();\n        console.log(createdAt);\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n  return { progress, url, error };\n};\n\nexport default useStorage;\n","import React, { useEffect } from \"react\";\nimport useStorage from \"../hooks/useStorage\";\nimport { motion } from \"framer-motion\";\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { url, progress } = useStorage(file);\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return (\n    <motion.div\n      className='progress-bar'\n      initial={{ width: 0 }}\n      animate={{ width: progress + \"%\" }}\n    ></motion.div>\n  );\n};\n\nexport default ProgressBar;\n","import React from \"react\";\nimport ProgressBar from \"./ProgressBar\";\n\nconst UploadForm = () => {\n  const [file, setFile] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const allowedFileTypes = [\"image/jpeg\", \"image/png\", \"image/heic\"];\n\n  const handleChange = (e) => {\n    let selected = e.target.files[0];\n    if (selected && allowedFileTypes.includes(selected.type)) {\n      setFile(selected);\n      setError(null);\n    } else {\n      setFile(null);\n      setError(\"Please select an image file (jpg or png)\");\n    }\n    console.log(selected);\n  };\n\n  return (\n    <form>\n      <label>\n        <input type='file' onChange={handleChange} />\n        <span>+</span>\n      </label>\n      <div className='output'>\n        {error && <div className='error'>{error}</div>}\n        {file && <div>{file.name}</div>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default UploadForm;\n","import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirstore = (collection) => {\n  const [docs, setDocs] = useState([]);\n  useEffect(() => {\n    projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snapshot) => {\n        let documents = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setDocs(documents);\n      });\n  }, [collection]);\n  return { docs };\n};\n\nexport default useFirstore;\n","import React from \"react\";\nimport useFirestore from \"../hooks/useFirestore\";\nimport { motion } from \"framer-motion\";\n\nconst PostGrid = ({ setSelectedImage }) => {\n  const { docs } = useFirestore(\"posts\");\n  console.log(docs);\n  return (\n    <div className='img-grid'>\n      {docs &&\n        docs.map((doc) => {\n          return (\n            <motion.div\n              whileHover={{ opacity: 1 }}\n              layout\n              className='img-wrap'\n              key={doc.id}\n              onClick={() => {\n                setSelectedImage(doc.url);\n              }}\n            >\n              <motion.img\n                src={doc.url}\n                alt=''\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 1 }}\n              />\n            </motion.div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default PostGrid;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst Post = ({ selectedImage, setSelectedImage }) => {\n  const handleClick = (e) => {\n    if (e.target.classList.contains(\"backdrop\")) {\n      setSelectedImage(null);\n    }\n  };\n  return (\n    <motion.div\n      onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      className='backdrop'\n    >\n      <motion.img\n        src={selectedImage}\n        alt=''\n        className='enlargedImage'\n        initial={{ y: \"-100vh\" }}\n        animate={{ y: \"0\" }}\n      />\n    </motion.div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\nimport PostGrid from \"./comps/PostGrid\";\nimport Post from \"./comps/Post\";\nfunction App() {\n  const [selectedImage, setSelectedImage] = React.useState(null);\n\n  return (\n    <div className='App'>\n      <Title />\n      <UploadForm />\n      <PostGrid setSelectedImage={setSelectedImage} />\n      {selectedImage && (\n        <Post\n          setSelectedImage={setSelectedImage}\n          selectedImage={selectedImage}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}